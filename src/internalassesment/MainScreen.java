package internalassesment;

import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatArcDarkContrastIJTheme;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author l.mccausland
 */
public class MainScreen extends javax.swing.JFrame {

    public int quizCount;
    final String USERNAME = System.getProperty("user.name");
    public final String PATH = "C:\\Users\\" + USERNAME + "\\Documents\\files\\";
    public final String TITLE = "Quiza";
    //public final String PATH = System. getProperty("user. dir");

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        setFrame();
        setList();
        getFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        quizList = new java.awt.List();
        editButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        createLabel1 = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        editLabel = new javax.swing.JLabel();
        deleteLabel = new javax.swing.JLabel();
        sideBar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(null);

        quizList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        quizList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                quizListItemStateChanged(evt);
            }
        });
        quizList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quizListActionPerformed(evt);
            }
        });
        getContentPane().add(quizList);
        quizList.setBounds(240, 100, 376, 305);

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        getContentPane().add(editButton);
        editButton.setBounds(80, 270, 100, 40);

        startButton.setText("Start!");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startButton);
        startButton.setBounds(80, 180, 100, 40);

        createButton.setText("Create Quiz");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        getContentPane().add(createButton);
        createButton.setBounds(80, 100, 100, 40);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(80, 360, 100, 40);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        getContentPane().add(refreshButton);
        refreshButton.setBounds(500, 50, 110, 30);

        outputLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(outputLabel);
        outputLabel.setBounds(174, 410, 376, 36);

        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 48)); // NOI18N
        jLabel1.setText("Quiza!");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 10, 180, 50);

        createLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/addIcon.png"))); // NOI18N
        getContentPane().add(createLabel1);
        createLabel1.setBounds(20, 90, 60, 60);

        startLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/startIcon.png"))); // NOI18N
        getContentPane().add(startLabel);
        startLabel.setBounds(20, 170, 60, 60);

        editLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/editIcon.png"))); // NOI18N
        getContentPane().add(editLabel);
        editLabel.setBounds(20, 260, 60, 60);

        deleteLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/deleteIcon.png"))); // NOI18N
        getContentPane().add(deleteLabel);
        deleteLabel.setBounds(20, 350, 60, 60);

        sideBar.setBackground(new java.awt.Color(13, 19, 36));
        sideBar.setOpaque(true);
        getContentPane().add(sideBar);
        sideBar.setBounds(0, -7, 210, 480);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Asks the user to enter the name of the quiz they want to create, then
     * creates it.
     *
     * @param evt
     */
    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // Create Input Dialog
        String name = JOptionPane.showInputDialog("Enter quiz name: ");
        if (null == name) {
            JOptionPane.showMessageDialog(null, "enter a name!");
            // if the user adds spaces, tell them to enter something
        } else // if the user enters nothing, tell them to
            switch (name) {
                case "":
                    JOptionPane.showMessageDialog(null, "enter a name!");
                    // if the user enters the name, create the quiz
                    break;
                default:
                    //create a new quiz
                    createQuiz(name);
                    break;
            }
    }//GEN-LAST:event_createButtonActionPerformed
    /**
     * Checks if the "Start!" button was clicked and starts the selected quiz
     *
     * @param evt
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        startQuiz();
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Checks if the edit button was clicked and edits the selected quiz
     *
     * @param evt
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int index = quizList.getSelectedIndex();
        edit(index);
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * Checks if the delete button was clicked and then runs the deleteQuiz()
     * method
     *
     * @param evt
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteQuiz();
    }//GEN-LAST:event_deleteButtonActionPerformed
    /**
     * When the refresh button is clicked this method will run the getFiles()
     * method
     *
     * @param evt
     */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        getFiles();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void quizListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quizListActionPerformed
        System.out.println("click");
    }//GEN-LAST:event_quizListActionPerformed

    private void quizListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_quizListItemStateChanged
        output("Selected Quiz: " + quizList.getSelectedItem());
    }//GEN-LAST:event_quizListItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            FlatArcDarkContrastIJTheme.setup();
        } catch (Exception e) {
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainScreen().setVisible(true);
        });
    }

    /**
     * sets the visual properties of the JFrame
     */
    private void setFrame() {
        //set window title
        this.setTitle("Quiza");
        //set frame size
        this.setSize(650, 480);
        //set to dispose on close
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        //set location to show up in the middle (null) 
        this.setLocationRelativeTo(null);
        //set frame visible
        this.setVisible(true);
        //set the frame resizabke property to false
        this.setResizable(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createButton;
    private javax.swing.JLabel createLabel1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel deleteLabel;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel editLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel outputLabel;
    private java.awt.List quizList;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel sideBar;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel startLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates a new quiz and adds it to the JList
     *
     * @param name the name the user entered
     */
    private void createQuiz(String name) {
        // Check if the name is already used
        for (int i = 0; i < quizList.getItems().length; i++) {
            if (name.equals(quizList.getItem(i))) {
                output("Name already taken!");
                return;
            }
        }
        // get the path for this quiz
        String path = PATH + name;

        // save quiz to permanent storage        
        try {
            FileWriter writer = new FileWriter(path);   // First object
            PrintWriter printer = new PrintWriter(writer);
            printer.print("");                        // Call class method to write to file   
            printer.close();                                  // Close connection
        } catch (IOException error) {                         // catch error....
            output("File write error");                  // output message..
        }
        quizList.add(name);
        output("Quiz created");
    }

    /**
     * Set AWT List visuals
     */
    private void setList() {
        // set list visuals
        quizList.setBackground(new Color(37, 42, 53));
    }

    private void edit(int index) {
        String text = "";
        // edit quiz questions and properties
        if (quizList.getSelectedItem() == null) {
            output("Select a quiz!");
        } else {
            // Get the quiz that we are working with
            String edit = inputDialog(
       "Do you want a multiple choice quiz (1) or a text answer quiz? (2)");
            if ("1".equals(edit)) {
                String length = inputDialog(
           "Enter how many questions you want in the quiz: ");
                if (length != null) {
                    for (int i = 0; i < Integer.parseInt(length); i++) {
                        String newQuestion = inputDialog(
                        "Enter question " + (i + 1) + ": ");
                        String[] newAnswers = new String[4];
                        for (int j = 0; j < newAnswers.length; j++) {
                            newAnswers[i] = inputDialog(
                            "Enter an answer to question " + (i + 1) + ": ");                          
                        }
                        text += newQuestion + "|" + arrayToString(newAnswers) + "\n";
                    }
                    write(quizList.getSelectedItem(), text);
                }
            } else if ("2".equals(edit)) {
                String length = JOptionPane.showInputDialog(null,
                        "Enter how many questions you want in the quiz: ");
                if (length != null) {
                    for (int i = 0; i < Integer.parseInt(length); i++) {
                        String newQuestion = JOptionPane.showInputDialog(
                                null, "Enter question " + (i + 1) + ": ");
                        String newAnswer = JOptionPane.showInputDialog(
                                null, "Enter answer to question " + (i + 1) + ": ");
                        text += newQuestion + " | " + newAnswer + "\n";
                    }
                    write(quizList.getSelectedItem(), text);
                }
            }
        }
    }

    public void write(String item, String text) {
        try {
            File quizToEdit = new File(PATH + item);
            FileWriter writer = new FileWriter(quizToEdit.getPath());
            PrintWriter printer = new PrintWriter(writer);
            printer.println(text + "\n");
            printer.close();
        } catch (IOException e) {
            output("File Write error");
        }
    }

    public final void getFiles() {
        quizList.removeAll();

        // Create a File object for the folder
        File folder = new File(PATH);

        // Get a list of all files in the folder
        File[] files = folder.listFiles();

        // Check if the folder exists
        if (!folder.exists()) {
            System.out.println("The folder does not exist. Creating Folder...");
            folder.mkdir();
        }

        // Check if the folder is empty
        if (files.length == 0) {
            System.out.println("The folder is empty.");
            return;
        }

        // Print the list of files in the folder
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                quizList.add(files[i].getName());
            }
        }
    }

    private void deleteQuiz() {
        if (quizList.getSelectedItem() == null) {
            output("Select a quiz!");
        } else {
            int option = JOptionPane.showConfirmDialog(null, "Are you sure?");
            if (option == 0) {
                String item = quizList.getSelectedItem();
                quizList.remove(item);
                File fileToDelete = new File(PATH + item);
                fileToDelete.delete();
            }
        }
    }

    private void output(String text) {
        outputLabel.setText(text);
    }

    private String inputDialog(String text) {
        return JOptionPane.showInputDialog(this,
 text,TITLE, JOptionPane.QUESTION_MESSAGE);
    }

    private void startQuiz() {
        if (quizList.getSelectedItem() == null) {
            output("Select a Quiz!");
        } else {
            File file = new File(PATH + quizList.getSelectedItem());

            if (file.length() <= 0) {
                output("Add questions!");
            } else {
                QuizScreen quizScreen = new QuizScreen(file);
                this.setVisible(false);
                this.dispose();
            }
        }
    }
    
    public String arrayToString(String[] arr) {
    if (arr == null || arr.length == 0) {
        return "";
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < arr.length; i++) {
        sb.append(arr[i]);
        if (i != arr.length - 1) {
            sb.append(",");
        }
    }
    return sb.toString();
}
}
